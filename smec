#!./node_modules/.bin/babel-node
import parser from './src/parser'
import tokenizer from './src/tokenizer'
import codegen from './src/codegen'
import fs from 'fs'
import path from 'path'
import VM from './src/vm'

function start () {
  let fileName
  let isCompile
  if (process.argv.length >= 4) {
    isCompile = process.argv[2]
    if (isCompile === '-c') isCompile = true
    fileName = process.argv[3]
  } else {
    fileName = process.argv[2]
  }
  if (!fileName) {
    console.log('No input file')
    process.exit()
  }
  const rawCode = fs.readFileSync(fileName, 'utf-8')
  if (isCompile) {
    const parsedName = path.parse(fileName)
    compile(rawCode, parsedName.name, parsedName.ext)
  } else {
    execute(rawCode)
  }
}

function execute (rawCode) {
  const codes = codegen(parser(tokenizer(rawCode)))
  const vm = new VM(codes)
  vm.run(codes[codes.length - 1])
}

function compile (rawCode, name) {
  const codes = codegen(parser(tokenizer(rawCode)))
  const buffer = Buffer.alloc(codes.length * 4, 0)
  codes.forEach((code, i) => {
    buffer.writeFloatBE(code, i * 4)
  })
  fs.writeFileSync(`${name}.smebytes`, buffer)
}

start()
